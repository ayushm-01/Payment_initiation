import React, { useState, useEffect } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import { Card, Table, Form, Button } from "react-bootstrap";
import { jwtDecode } from "jwt-decode";
import qs from "qs";
import API from "../../axiosInstance";

export default function SubmitApproval({ role }) {
  // Get user ID from token
  let userId = null;
  const token = localStorage.getItem("jwt");
  if (token) {
    try {
      const decoded = jwtDecode(token);
      userId = decoded?.sub;
    } catch {}
  }

  const [password, setPassword] = useState("");
  const [batch, setBatch] = useState(null);
  const [comments, setComments] = useState("");

  // Fetch batch on role/user change
  useEffect(() => {
    if (role) fetchBatch();
  }, [role, userId]);

  const fetchBatch = async () => {
    try {
      let url = "";
      let params = {};

      if (role === "jrmanager") {
        url = "/api/jr-manager/next-batch";
        if (userId) params.jrManagerId = userId;
      } else if (role === "srmanager") {
        url = "/api/sr-manager/next-batch";
        if (userId) params.srManagerId = userId;
      } else if (role === "director") {
        url = "/api/director/next-batch";
        if (userId) params.directorId = userId;
      }

      if (!url) return;

      const res = await API.get(url, { params });
      if (res.data?.batchId) setBatch(res.data);
      else if (Array.isArray(res.data) && res.data.length > 0) setBatch(res.data[0]);
      else setBatch(null);
    } catch {
      alert("Failed to fetch batch!");
    }
  };

  const submitDecision = async (approved) => {
    if (!password.trim()) {
      alert("Password is required!");
      return;
    }
    if (!batch) {
      alert("No batch to submit!");
      return;
    }

    try {
      let url = "";
      let params = {
        batchIds: [batch.batchId],
        approved,
        password,
        comment: comments,
      };

      if (role === "jrmanager") {
        url = "/api/jr-manager/decision";
        if (userId) params.jrManagerId = userId;
      } else if (role === "srmanager") {
        url = "/api/sr-manager/decision";
        if (userId) params.srManagerId = userId;
      } else if (role === "director") {
        url = "/api/director/decision";
        if (userId) params.directorId = userId;
      }

      if (!url) {
        alert("Invalid role!");
        return;
      }

      await API.post(url, null, {
        params,
        paramsSerializer: (p) => qs.stringify(p, { arrayFormat: "repeat" }),
      });

      alert("Decision submitted successfully!");
      setBatch(null);
      setComments("");
      setPassword("");
    } catch (err) {
      alert("Failed to submit decision: " + (err.response?.data?.message || err.message));
    }
  };

  if (!batch) {
    return (
      <div className="text-center mt-5">
        <div>No pending batches.</div>
      </div>
    );
  }

  return (
    <div className="container mt-4">
      {/* Batch Info */}
      <Card className="mb-3">
        <Card.Header className="bg-primary text-white">Batch Information</Card.Header>
        <Card.Body>
          <Table striped bordered hover>
            <tbody>
              <tr><th>Reference</th><td>{batch.yourRef}</td></tr>
              <tr><th>Name</th><td>{batch.batchName}</td></tr>
              <tr><th>Currency</th><td>{batch.currency}</td></tr>
              <tr><th>Status</th><td>{batch.status}</td></tr>
              <tr><th>Payment Ref</th><td>{batch.paymentRef}</td></tr>
            </tbody>
          </Table>
        </Card.Body>
      </Card>

      {/* Batch Summary */}
      <Card className="mb-3">
        <Card.Header className="bg-primary text-white">Batch Summary</Card.Header>
        <Card.Body>
          <Table striped bordered hover>
            <thead>
              <tr>
                <th>Source Account</th>
                <th>Comments</th>
                <th>Number of Payments</th>
                <th>Total Amount</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>{batch.sourceAccId}</td>
                <td>{batch.comments}</td>
                <td>{batch.numOfPayments}</td>
                <td>{batch.totAmt}</td>
              </tr>
            </tbody>
          </Table>
        </Card.Body>
      </Card>

      {/* Approval Form */}
      <Card className="mb-3">
        <Card.Header className="bg-primary text-white">Make Decision</Card.Header>
        <Card.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Comments (optional)</Form.Label>
              <Form.Control
                as="textarea"
                rows={2}
                value={comments}
                onChange={(e) => setComments(e.target.value)}
                placeholder="Enter any comments..."
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Password *</Form.Label>
              <Form.Control
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Enter your password"
              />
            </Form.Group>
          </Form>
        </Card.Body>
      </Card>

      {/* Action Buttons */}
      <div className="d-flex justify-content-end gap-2 mb-4">
        <Button variant="success" onClick={() => submitDecision(true)} disabled={!password}>
          Approve
        </Button>
        <Button variant="danger" onClick={() => submitDecision(false)} disabled={!password}>
          Reject
        </Button>
      </div>
    </div>
  );
}
